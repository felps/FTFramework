package ftm;

import ftec.*;
import java.util.*;
import wfm.*;

import defaultTypes.*;

/*
 * TODO: Criar um método para atualização do status 
 */
public class Ftm {
	private static List<Ftec> runningFtecs;
	private static List<Task> scheduledTasks;
	private static Map<String, Long> FtecRelation;
	
	public Ftm() {
		runningFtecs = new ArrayList<Ftec>();
		scheduledTasks = new ArrayList<Task>();
		FtecRelation = new HashMap<String, Long>();
	}
	
	public static void main(String[] args) throws InterruptedException {
		while (true) {
			// While there are still readyTasks to be scheduled, do it!
			for (int i = 0; i < scheduledTasks.size(); i++) {
				submitTask(scheduledTasks.get(1));
				scheduledTasks.remove(1);
			}
		}
	}

	public static void submitTask(Task task) throws InterruptedException {
		// If the task is already scheduled, then do nothing
		for (int i = 0; i < scheduledTasks.size(); i++) {
			if(task == scheduledTasks.get(i)) {
				return;
			}
		}
		
		
		scheduledTasks.add(task);
		
		//Define FTEC to be used with FTSM
		//TODO: Implement FTSM
		// When implemented call will be:
		// Ftec ftec = ftsm(task);
		
		//STUB for ftsm;
		Ftec ftec = new RetryFTEC("retry", "/home/felps/Dropbox/Desenvolvimento/Workspace_Integrade/FTEC-Ensaio/src/ftec/retryFtec.java", task.getBinaryLocation(), task.getInputFile(), "");
		
		//Create a thread to FTEC
		Thread ftecExecution = new Thread(ftec);
		
		//Store its id
		Long id = new Long(ftecExecution.getId());
		FtecRelation.put(task.getName(), id);
		
		//Start the thread
		ftecExecution.start();
		
		Thread.sleep(0);

	}

	private void ftecFinished() {
		// TODO: Preencher este método
		int taskId;
		// Define the task that has finished
		Task finishedTask = scheduledTasks.get(taskId);
		
		// Notify WFM about the task conclusion
		wfm.executeTask(finishedTask.getWorkflow(), finishedTask.getName());
		// Remove it from the runningFtecs list
		// Remove from FtecRelation
		// Request Ready Tasks to WFM
		// Submit all Ready Tasks
	}
}
